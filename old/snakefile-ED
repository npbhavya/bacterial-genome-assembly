#####################################################################
# Running prinseq and assembly for the ED Strains
# Author: Bhavya Papudeshi 
# The steps in the code
# - prinseq - QC for Illumina paired end 
# - fitlong - QC for nanopore reads 
#   Determine the genome coverage manually, NOT included in the workflow
#   Following the notes here https://github.com/rrwick/Trycycler/wiki/Guide-to-bacterial-genome-assembly
# - Assembly - Unicycler 
#
# To run the snakefile;
# snakemake -s snakemake-ED
######################################################################

import os
import sys
import glob 

#Directory with illumina paired end reads from MIGS
# The paired end reads have to be in the format {sample name}_R1_001.fastq.gz
#getting this code from https://github.com/linsalrob/EdwardsLab/blob/master/snakemake/process_metagenomes.snakefile

SAMPLES, = glob_wildcards('ED-Illumina-MIGS/{sample}R1_001.fastq.gz')

if len(SAMPLES) == 0:
	sys.stderr.write(f"We did not find any fastq files in {SAMPLES}. Is this the right read dir?\n")
	sys.exit(0)

print(f"Samples are {SAMPLES}")

rule all:
	input:
		expand("ED-Illumina-MIGS/{sample}prinseq.good_out_R1.fastq", sample=SAMPLES),
		expand("ED-Illumina-MIGS/{sample}prinseq.good_out_R2.fastq", sample=SAMPLES),
		expand("ED-ONT/{sample}ONT_good.fastq", sample=SAMPLES),
		expand("ED-Illumina-MIGS/{sample}prinseq_single.fastq", sample=SAMPLES),
		expand("assembly/{sample}/assembly.gfa", sample=SAMPLES),
		expand("assembly/{sample}/assembly.fasta",sample=SAMPLES),
		expand("assembly/{sample}/unicycler.log", sample=SAMPLES)

#getting this code from https://raw.githubusercontent.com/shandley/hecatomb/master/snakemake/workflow/rules/00_prinseq.smk
rule prinseq_low_quality:
	input:
		r1="ED-Illumina-MIGS/{sample}R1_001.fastq.gz",
		r2="ED-Illumina-MIGS/{sample}R2_001.fastq.gz"
	output:
		r1="ED-Illumina-MIGS/{sample}prinseq.good_out_R1.fastq",
		r2="ED-Illumina-MIGS/{sample}prinseq.good_out_R2.fastq",
		s1="ED-Illumina-MIGS/{sample}prinseq.single_out_R1.fastq",
		s2="ED-Illumina-MIGS/{sample}prinseq.single_out_R2.fastq",
		b1=temporary("ED-Illumina-MIGS/{sample}prinseq.bad_out_R1.fastq"),
		b2=temporary("ED-Illumina-MIGS/{sample}prinseq.bad_out_R2.fastq")
	resources:
		mem_mb=20000,
		cpus=2
	params:
		o="ED-Illumina-MIGS/{sample}prinseq"
	shell:
		"""
		prinseq++ -min_len 60 -min_qual_mean 25 -ns_max_n 1 -derep 1 \
			-out_format 0 -trim_tail_left 5 -trim_tail_right 5 \
			-ns_max_n 5  -trim_qual_type min -trim_qual_left 30 \
			-trim_qual_right 30 -trim_qual_window 10 \
			-threads {resources.cpus} \
			-out_good {output.r1} -out_single {output.s1} -out_bad {output.b1} \
			-out_good2 {output.r2} -out_single2 {output.s2} -out_bad2 {output.b2} \
			-fastq {input.r1} -fastq2 {input.r2};
		"""

#remove the reads that are shorter than 1kbp and exclude 5% of the reads
rule nanopore_QC:
	input:
		fastq="ED-ONT/{sample}ONT.fastq"
	output:
		out="ED-ONT/{sample}ONT_good.fastq"
	run:
		shell("export LC_ALL=en_US.UTF-8"),
		shell("filtlong --min_length 1000 --keep_percent 95 {input.fastq} >{output.out}"),

rule merge_unpaired_reads:
	input:
		s1="ED-Illumina-MIGS/{sample}prinseq.single_out_R1.fastq",
                s2="ED-Illumina-MIGS/{sample}prinseq.single_out_R2.fastq"
	output:
		o="ED-Illumina-MIGS/{sample}prinseq_single.fastq"
	run:
		shell("mkdir assembly"),
		shell("cat {input.s1} {input.s2} >{output.o}"),
		shell("mkdir assembly/{sample}")

rule unicycler:
	input:
		r1="ED-Illumina-MIGS/{sample}prinseq.good_out_R1.fastq",
                r2="ED-Illumina-MIGS/{sample}prinseq.good_out_R2.fastq",
		s="ED-Illumina-MIGS/{sample}prinseq.single.fastq",
		ont="ED-ONT/{sample}ONT_good.fastq"
	params:
		out="assembly/{sample}"
	output:
		"assembly/{sample}/assembly.gfa",
		"assembly/{sample}/assembly.fasta",
		"assembly/{sample}/unicycler.log"
	shell:
		"unicycler -1 {input.r1} -2 {input.r2} -l {input.ont} -s {input.s} -o {params.out} --no_correct"

