#####################################################################
# Running prinseq and assembly for the ED Strains
# Author: Bhavya Papudeshi 
# The steps in the code
# - guppy - fast5 to fastq conversion 
# - filtlong - QC
# - assembly - unicycler, flye, raven, miniasm 
# - viralverify - unicycler, flye, raven, miniasm assembled contigs
# - extracting viral contigs - saved to viral_contigs directory
#  Manually running trycycler, not included in snakemake
#
#
# To run the snakefile;
# snakemake -s snakefile-1 --cores 10
# snakemake -s snakefile-1 --cores 10  --profile slurm
######################################################################

import os
import sys
import glob

directories, files= glob_wildcards("fast5/{dir}/{file}")
print(f"Input fast5 directories are {directories}\n")

rule all:
	input:
		expand("guppy/{sample}-guppy-gpu", sample=directories),
		#expand("guppy/{sample}-guppy-gpu.fastq", sample=directories),
		#expand("filtlong/{sample}-filtlong.fastq", sample=directories),
		#expand("assembly/{sample}-unicycler/unicycler.log", sample=directories),
		#expand("assembly/{sample}_flye/assembly.fasta", sample=directories),
		#expand("assembly/{sample}_raven.fasta", sample=directories),
		#expand("assembly/{sample}_miniasm_and_minipolish.fasta", sample=directories),
		#expand("viralverify/{sample}_unicycler", sample=directories),
		#expand("viralverify/{sample}_flye", sample=directories),
		#expand("viralverify/{sample}_raven", sample=directories),
		#expand("viralverify/{sample}_miniasm", sample=directories),
		#expand("viralverify/{sample}-unicycler-viralseq.txt", sample=directories),
		#expand("viralverify/{sample}-flye-viralseq.txt", sample=directories),
		#expand("viralverify/{sample}-raven-viralseq.txt", sample=directories),
		#expand("viralverify/{sample}-miniasm-viralseq.txt", sample=directories),
		#expand("viral_contigs/{sample}-unicycler.fasta", sample=directories),
		#expand("viral_contigs/{sample}-flye.fasta", sample=directories),
		#expand("viral_contigs/{sample}-raven.fasta", sample=directories),
		#expand("viral_contigs/{sample}-miniasm.fasta", sample=directories),

rule guppy:
	input:
		"fast5/{sample}"
	output:
		directory("guppy/{sample}-guppy-gpu")
	resources:
		partition="hpc_general",
		time=4400,
		mem_mb=10000
	params:
		indir="fast5/{sample}",
		base="{sample}-guppy-gpu"
	shell:
		"""
		mkdir guppy
		/home/bhavya/opt/ont-guppy-gpu/bin/guppy_basecaller --input_path {params.indir} --save_path guppy/{params.base} --flowcell FLO-FLG001 --kit SQK-RBK004 --device auto
		"""

rule preQC:
	input:
		"guppy/{sample}-guppy-gpu/pass"
	output:
		"guppy/{sample}-guppy-gpu.fastq"
	shell:
		"""
		cat {input}/*.fastq > {output}
		"""

rule filtlong:
	input:
		"guppy/{sample}-guppy-gpu.fastq"
	output:
		"filtlong/{sample}-filtlong.fastq"
	params:
		base="{sample}-filtlong.fastq"
	shell:
		"""
		mkdir filtlong
		export LC_ALL=en_US.UTF-8
		filtlong --min_length 1000 --keep_percent 95 {input} > {output}
		"""

rule unicycler:
	input:
		s="filtlong/{sample}-filtlong.fastq"
	params:
		out="assembly/{sample}-unicycler"
	output:
		fa="assembly/{sample}-unicycler/assembly.fasta",
		log="assembly/{sample}-unicycler/unicycler.log"
	shell:
		"""
		mkdir assembly
		/home/bhavya/opt/Unicycler/unicycler-runner.py -l {input.s} -o {params.out} -t 10
		if [ -e {output.log} ]
		then
			touch {output.log}
			touch {output.fa}
			exit 0
		fi
		"""

rule flye:
	input:
		"filtlong/{sample}-filtlong.fastq"
	resources:
		cpu = 10
	output:
		fasta="assembly/{sample}_flye/assembly.fasta",
		log="assembly/{sample}_flye/flye.log"
	params:
		out="assembly/{sample}_flye"
	shell:
		"""
		flye --nano-corr {input} --threads {resources.cpu} --out-dir {params.out}
		if [ -e {output.log} ]
		then 
			touch {output.fasta}
			touch {output.log}
			exit 0
		fi
		"""
rule raven:
	input:
		"filtlong/{sample}-filtlong.fastq"
	resources:
		cpu = 10
	output:
		"assembly/{sample}_raven.fasta"
	shell:
		"""
		raven -t {resources.cpu} {input} > {output}
		if [ -e {output} ]
		then
			touch {output}
			exit 0
		fi
		"""

rule miniasm:
	input:
		"filtlong/{sample}-filtlong.fastq"
	resources:
		cpu =10
	output:
		gfa="assembly/{sample}_miniasm_and_minipolish.gfa",
		out="assembly/{sample}_miniasm_and_minipolish.fasta"
	shell:
		"""
		miniasm_and_minipolish.sh {input} {resources.cpu} > {output.gfa}
		any2fasta {output.gfa} > {output.out}
		if [ -e {output.out}]
		then
			touch {output.out}
			exit 0
		fi
		"""

rule viral_verify_unicycler:
	input:
		unicycler="assembly/{sample}-unicycler/assembly.fasta"
	resources:
		cpu=10
	params:
		uni="viralverify/{sample}_unicycler",
	output:
		u=directory("viralverify/{sample}_unicycler"),
	shell:
		"""
		[ -s {input.unicycler} ] && echo "file not empty"
		mkdir viralverify
		if [ -s {input.unicycler} ]
		then 
			viral_verify -i {input.unicycler} -o {params.uni} -H db/Pfam.hmm -t {resources.cpu} --prefix assembly-unicycler
			if [ -e {output.u}]
			then
				mkdir {output.u}
				exit 0
			fi
		else
			mkdir {output.u}
			exit 0
		fi
		"""		

rule viral_verify_flye:
	input:
		"assembly/{sample}_flye/assembly.fasta"
	resources:
		cpu=10
	params:
		fl="viralverify/{sample}_flye"
	output:
		f=directory("viralverify/{sample}_flye")
	shell:
		"""
		[ -s {input} ] && echo "file not empty"
		if [ -s {input} ]
		then
			viral_verify -i {input} -o {params.fl} -H db/Pfam.hmm -t {resources.cpu} --prefix assembly-flye
			if [ -e {output.f}]
			then
				mkdir {output.f}
				exit 0
			fi
		else
			mkdir {output.f}
			exit 0
		fi
		"""

rule viral_verify_raven:
	input:
		raven="assembly/{sample}_raven.fasta"
	resources:
		cpu=10
	params:
		rav="viralverify/{sample}_raven"
	output:
		r=directory("viralverify/{sample}_raven")
	shell:
		"""
		[ -s {input.raven} ] || echo "file not empty"
		if [ -s {input.raven} ]
		then
			viral_verify -i {input.raven} -o {params.rav} -H db/Pfam.hmm -t {resources.cpu} --prefix assembly-raven
			if [ -e {output.r} ]
			then
				mkdir {output.r}
				exit 0
			fi
		else
			mkdir {output.r}
			exit 0
		fi
		"""

rule viral_verify_miniasm:
	input:
		miniasm="assembly/{sample}_miniasm_and_minipolish.fasta"
	resources:
		cpu=10
	params:
		asm="viralverify/{sample}_miniasm"
	output:
		m=directory("viralverify/{sample}_miniasm")
	shell:
		"""
		[ -s {input.miniasm} ] || echo "file not empty"
		if [ -s {input.miniasm} ]
		then
			echo "file not empty"
			viral_verify -i {input.miniasm} -o {params.asm} -H db/Pfam.hmm -t {resources.cpu} --prefix assembly-miniasm
			if [ -e {output.m} ]
			then
				mkdir {output.m}
				exit 0
			fi
		else
			echo {input}
			mkdir {output.m}
			exit 0 
		fi
		"""

rule get_viral_seq_unicycler:
	input:
		directory("viralverify/{sample}_unicycler")
	params:
		base="viralverify/{sample}_unicycler/assembly-unicycler-results.csv"
	output:
		"viralverify/{sample}-unicycler-viralseq.txt"
	shell:
		"""
		if [ "$(ls -A {input})" != 1 ]
		then 
			grep -w "Virus," {params.base} | cut -d ',' -f 1 > {output}
		else 
			touch {output}
		fi
		"""

rule get_viral_seq_flye:
	input:
		directory("viralverify/{sample}_flye")
	params:
		base="viralverify/{sample}_flye/assembly-flye-results.csv"
	output:
		"viralverify/{sample}-flye-viralseq.txt"
	shell:
		"""
		if [ "$(ls -A {input})" != 1 ]
		then
			grep -w "Virus," {params.base} | cut -d ',' -f 1 > {output}
		else
			touch {output}
		fi
		"""
	
rule get_viral_seq_raven:
	input:
		directory("viralverify/{sample}_raven")
	params:
		base="viralverify/{sample}_raven/assembly-raven-results.csv"
	output:
		"viralverify/{sample}-raven-viralseq.txt"
	shell:
		"""
		if [ "$(ls -A {input})" != 1 ]
		then 
			grep -w "Virus," {params.base} | cut -d ',' -f 1 > {output}
		else
			touch {output}
		fi 
		"""

rule get_viral_seq_miniasm:
	input:
		directory("viralverify/{sample}_miniasm")
	params:
		base="viralverify/{sample}_miniasm/assembly-miniasm-results.csv"
	output:
		"viralverify/{sample}-miniasm-viralseq.txt"
	shell:
		"""
		if [ "$(ls -A {input})" != 1 ]
		then
			grep -w "Virus," {params.base} | cut -d ',' -f 1 > {output}
		else
			touch {output}
		fi
		"""

rule samtools_faidx_unicycler:
	input:
		u="viralverify/{sample}-unicycler-viralseq.txt",
		assembly=directory("assembly/{sample}-unicycler")
	output:
		"viral_contigs/{sample}-unicycler.fasta"
	shell:
		"""
		mkdir viral_contigs
		[ -s {input.u} ] && echo "file not empty" 
		if [ -s {input.u} ]
		then 
			for f in `cat {input.u}`; do samtools faidx {input.assembly}/assembly.fasta "$f" >> {output}; done 
			if [ -e {output} ]
			then 
				touch {output}
			fi
		else
			touch {output}
		fi
		"""

rule samtools_faidx_flye:
	input:
		f="viralverify/{sample}-flye-viralseq.txt",
		assembly=directory("assembly/{sample}_flye")
	output:
		"viral_contigs/{sample}-flye.fasta"
	shell:
		"""
		[ -s {input.f} ] && echo "file not empty"
		if [ -s {input.f} ]
		then
			for f in `cat {input.f}`; do samtools faidx {input.assembly}/assembly.fasta "$f" >> {output}; done
			if [ -e {output} ]
			then
				touch {output}
			fi
		else
			touch {output}
		fi
		"""

rule samtools_faidx_raven:
	input:
		r="viralverify/{sample}-raven-viralseq.txt",
		assembly="assembly/{sample}_raven.fasta"
	output:
		"viral_contigs/{sample}-raven.fasta"
	shell:
		"""
		[ -s {input.r} ]&& echo "file not empty"
		if [ -s {input.r} ]
		then 
			for f in `cat {input.r}`; do samtools faidx {input.assembly} "$f" >> {output}; done
			if [ -e {output} ]
			then
				touch {output}
			fi
		else
			touch {output}
		fi
		"""

rule samtools_faidx_miniasm:
	input:
		m="viralverify/{sample}-miniasm-viralseq.txt",
		assembly="assembly/{sample}_miniasm_and_minipolish.fasta"
	output:
		"viral_contigs/{sample}-miniasm.fasta"
	shell:
		"""
		[ -s {input.m} ] && echo "file not empty"
		if [ -s {input.m} ]
		then
			for f in `cat {input.m}`; do samtools faidx {input.assembly} "$f" >> {output}; done
			if [ -e {output} ]
			then 
				touch {output}
			fi
		else
			touch {output}
		fi
		"""


